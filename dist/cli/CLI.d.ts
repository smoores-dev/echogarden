import * as API from '../api/API.js';
import { CLIOptions } from './CLIOptions.js';
type CLIOperationData = {
    operation: string;
    operationArgs: string[];
    globalOptions: API.GlobalOptions;
    cliOptions: CLIOptions;
    operationOptionsLookup: Map<string, string>;
};
export declare function start(processArgs: string[]): Promise<void>;
export declare function speak(operationData: CLIOperationData): Promise<void>;
export declare function transcribe(operationData: CLIOperationData): Promise<void>;
export declare function align(operationData: CLIOperationData): Promise<void>;
export declare function alignTranslation(operationData: CLIOperationData): Promise<void>;
export declare function alignTranscriptAndTranslation(operationData: CLIOperationData): Promise<void>;
export declare function alignTimelineTranslation(operationData: CLIOperationData): Promise<void>;
export declare function translateSpeech(operationData: CLIOperationData): Promise<void>;
export declare function detectLanguage(operationData: CLIOperationData, mode: 'speech' | 'text' | 'auto'): Promise<void>;
export declare function detectVoiceActivity(operationData: CLIOperationData): Promise<void>;
export declare function denoise(operationData: CLIOperationData): Promise<void>;
export declare function isolate(operationData: CLIOperationData): Promise<void>;
export declare function listEngines(operationData: CLIOperationData): Promise<void>;
export declare function listTTSVoices(operationData: CLIOperationData): Promise<void>;
export declare function installPackages(operationData: CLIOperationData): Promise<void>;
export declare function uninstallPackages(operationData: CLIOperationData): Promise<void>;
export declare function listPackages(operationData: CLIOperationData): Promise<void>;
export declare function serve(operationData: CLIOperationData): Promise<void>;
export {};
